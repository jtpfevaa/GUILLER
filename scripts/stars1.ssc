
// Name: Zodiac
// Author: Matthew Gates
// License: Public Domain
// Version: 1.2
// Description: This script displays the constellations of the Zodiac.
//              That means the constellations which lie along the line which
//              the Sun traces across the celestial sphere over the course 
//              of a year.
//

include("status_label.inc");
include("../textures/img/photos/sizeImg.js");
include("stars.js");	// Cargar la lista de estrellas a visitar

LabelMgr.deleteAllLabels();

useStatusLabel("MENSAJE: ", 50, core.getScreenHeight() - 50, 16, "#ff0000");

var imgPath = "../textures/img/photos/";
var constellations = new Array("Aquarius", "Pisces", "Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpius", "Sagittarius", "Capricornus");

var initial = {Planet: "Earth", Position: "Santurtzi", lon: 43, lat: -3};
core.setSkyCulture("modern");
core.clear("deepspace");
core.wait(1);

core.setDate("2006:03:14T21:21:32");
core.moveToRaDec("17h 53m 0s", "66d 25m 0s");
StelMovementMgr.zoomTo(210, 5);
core.wait(5);

ConstellationMgr.setFlagIsolateSelected(true);
ConstellationMgr.setFlagArt(true);
ConstellationMgr.setFlagLabels(true);
ConstellationMgr.setArtIntensity(0.6);

var saltar = false;
var timeTakeOff = 10;
var timeLanding = 10;
var timeViewConst = 10;
var timePicture = 5;
var timeZoomPlanet = 10;
var timeViewPlanet = 5;
var timeZoomConst = 10;
var timeViewConst = 5;

if(saltar == false) {			//saltar bloque
var waitInterConst = 0.6;
for(i=0; i<constellations.length; i++)
{
	core.selectObjectByName(constellations[i], false);
	core.wait(waitInterConst);
}

}		// Fin salto

core.wait(1);
ConstellationMgr.setFlagBoundaries(true);
core.wait(1);
GridLinesMgr.setFlagEclipticLine(true);

// Iniciar desde la Tierra
var planetas = [
    { nombre: "Venus", date:"2025-01-05T03:45:47", zConst: 30.8, zoom: 0.00764 ,lon: 6.7 , lat: 40.3 , alt: 50000 , constInx: 0 , rot = 3600 * 24 },
    { nombre: "Mercury", date:"2025-03-12T23:59:47", zConst: 26.9, zoom: 0.00392 , lon: 91.8 , lat: 44.24 , alt: 7 ,constInx: 1 , rot = 3600 * 24 },
    { nombre: "Moon", date:"2025-10-14T08:56:00", zConst: 26.9, zoom: 0.00139 , lon: 0.7 , lat: 0 , alt: 50 , constInx: 2 , rot = 3600 * 24 },
    { nombre: "Mars", date:"2026-06-30T11:22:00", zConst: 26.9, zoom: 0.00139 , lon: -175.399994 , lat: -14.48 , alt: 17 , constInx: 3 , rot = 3600},
    { nombre: "Io", date:"2025-12-18T09:48:00", zConst: 26.9, zoom: 0.00139 , lon: 0.7 , lat: 0 , alt: 50 , constInx: 4 , rot = 3600},
    { nombre: "Europa", date:"2025-12-19T17:17:00", zConst: 17.68, zoom: 0.253 , lon: 0.7 , lat: 0 , alt: 50 , constInx: 5 , rot = 60},
    { nombre: "Saturn", date:"2035-07-02T11:42:57", zConst: 44.4, zoom: 0.00903 , lon: -73.71 , lat: 9.24 , alt: 200000 , constInx: 6 , rot = 3600},
    { nombre: "Titan", date:"2035-07-02T11:42:00", zConst: 61.9, zoom: 0.353 , lon: 0.7 , lat: 0 , alt: 50 , constInx: 7 , rot = 3600},
    { nombre: "Uranus", date:"2061-08-14T11:42:00", zConst: 22.8, zoom: 0.00139 , lon: 57.73 , lat: 60.0 , alt: 30268000 , constInx: 8 , rot = 3600},
    { nombre: "Neptune", date:"2123-07-13T13:51:00", zConst: 37.6, zoom: 0.00139 , lon: 94.71 , lat:11.24 , alt: 24764000 , constInx: 9 , rot = 3600},
    { nombre: "Jupiter", date:"2233-02-13T11:52:00", zConst: 52.4, zoom: 0.00171 , lon: 121.71 , lat: 27.24 , alt: 71492000 , constInx: 10 , rot = 3600},
    { nombre: "Earth", date:"2192-08-13T11:52:00", zConst: 30.6, zoom: 0.00139 , lon: 0.7 , lat: 0 , alt: 50 , constInx: 11 , rot = 3600}
];


core.setObserverLocation(initial.lon,initial.lat,4000,1,initial.Position,initial.Planet);

ConstellationMgr.setFlagLines(true);
ConstellationMgr.setFlagLabels(true);
GridLinesMgr.setFlagEclipticLine(true);
//GridLinesMgr.setFlagEquatorLine(true);
SolarSystem.setFlagPlanets(true);
SolarSystem.setFlagOrbits(true);
SolarSystem.setFlagPointer(true);
SolarSystem.setFlagLabels(true);
NebulaMgr.setDesignationUsage(true);

StarMgr.setFlagLabels(true);
StarMgr.setFlagStars(true);

function planetRotation(secs , rate = 1.0 )
{
	core.setTimeRate(rate);
	core.wait(secs);
	core.setTimeRate(1.0);
	
}

function zoomRate(IR)
{
var AR=16/9;
var Rh=0.02;
	if(IR > AR) {
		return ((1-2*Rh)/Math.sqrt(1+(1/Math.pow(IR,2))));
	} else {
		return ((1-2*Rh)/(AR*Math.sqrt(1+(1/Math.pow(IR,2)))));
	}
}

function showImgObject( name , zoom , img, sleep = 0)
{
var info = core.getObjectInfo(name);

	if(info) {
	var image = imgPath + img + ".png";
	var id = name + "_img";

	var obj = imgSize[img+".png"];
	var ratio = (obj == undefined) ? 1.0 : obj["width"]/obj["height"];
	var zoomrate = zoomRate(ratio);

		if(obj)
		core.debug( img + ": ratio = "+ ratio + "  w = " + obj["width"] + "  h = " + obj["height"] + "   z = " + zoomrate);
		else
		core.debug( img + ": ratio = "+ ratio );

		RA = info["raJ2000"];
		DEC = info["decJ2000"];
		zoomrate = (zoomrate > 0.5) ? 0.5 : zoomrate;
		SZ = zoom*zoomrate;
		// Añadir la imagen en la posición de la estrella
//		var ret = StelSkyLayerMgr.insertSkyImage(image , name + "_img",true);
		var ret = core.loadSkyImage(id ,image ,RA+SZ,DEC-SZ,RA-SZ,DEC-SZ,RA-SZ,DEC+SZ,RA+SZ,DEC+SZ,zoom,14.0, false);
//		LabelMgr.labelEquatorial(name + " - " + image + " - " + ret, RA,DEC , true , 20 , "#999999" ,"N");

		StelSkyLayerMgr.showLayer(id ,true);
//		status(ScreenImageDimensions(
		LabelMgr.labelEquatorial(name , RA , DEC , true , 20 , "#999999" ,"N");
		if(sleep > 0)
			core.wait(sleep);
			
		return id;

	} else {
		core.debug("No se encontró el objeto " + name);
		return undefined;
	}

}

function zoomToObject(name , zoom , time = 10 , wait = 3, msg)
{
    core.selectObjectByName(name , pointer = true);
    StelMovementMgr.setFlagTracking(true);
    StelMovementMgr.zoomTo(zoom , time); // Acercamiento suave en 5 segundos

    core.wait(time); // Esperar 10 segundos
    if(msg) {
    	status(name + ": " + msg);
    }
    core.wait(wait); // Mantener la vista por 3 segundos
    if(msg) {
    	status("");
    }
}

function visitConst(planet)
{
	if(planet.constInx != null ) {
	var stars = starsInx[planet.constInx].stars;
	var id;
		for (var j = 0; j < stars.length; j++) {
			zoomToObject( stars[j].name , stars[j].zoom , timeZoomConst , timeViewConst , stars[j].comm);

			id = showImgObject(stars[j].name, stars[j].zoom , stars[j].img , 4+stars[j].time);

			StelMovementMgr.zoomTo(planet.zConst , 5); // Alejamiento suave en 5 segundos
			core.wait(1);
			core.removeSkyImage(id);
//			id = showImgObject(stars[j].name, planet.zConst/5, stars[j].img);
			core.wait(6);
		}
	}
}

// Función para viajar suavemente a un planeta
function viajarA(inx) {

    core.setDate(planetas[inx].date,"utc");
    status("Buscando objeto " + planetas[inx].nombre );
    StelMovementMgr.zoomTo(200,1);
    zoomToObject( planetas[inx].nombre , planetas[inx].zConst , timeZoomPlanet , timeViewPlanet, "VISITAR la constelación de " + constellations[inx]);

    visitConst(planetas[inx]);

    zoomToObject(planetas[inx].nombre, planetas[inx].zConst , timeZoomPlanet , timeViewPlanet , "VISITANDO planeta " + planetas[inx].nombre);
    StelMovementMgr.zoomTo(planetas[inx].zoom, 5); // Acercamiento suave en 5 segundos
    core.wait(5); // Mantener la vista por 3 segundos
    planetRotation(10,planetas[inx].rot);

    status("Aterrizando en planeta " + planetas[inx].nombre);

    core.setObserverLocation(planetas[inx].lon, planetas[inx].lat, planetas[inx].alt,10,"",planetas[inx].nombre);
    core.wait(11); // Mantener la vista por 3 segundos

    status("Abriendo zoom en planeta " + planetas[inx].nombre);

    StelMovementMgr.zoomTo(83,3);
    core.wait(5); // Mantener la vista por 3 segundos

}

status("Iniciando Viaje desde la Tierra" + planetas[0].date);
core.setDate(planetas[0].date, "utc");
core.wait(5); // Mantener la vista por 3 segundos

// Recorrer cada planeta en orden
for (var i = 0; i < planetas.length; i++) {
    viajarA(i);
}

// Fin del viaje en Tierra
core.selectObjectByName("Sun", pointer = true);
// StelMovementMgr.zoomOut(true);
StelMovementMgr.zoomTo(50,1);
StelMovementMgr.setFlagTracking(true);
core.wait(5);
